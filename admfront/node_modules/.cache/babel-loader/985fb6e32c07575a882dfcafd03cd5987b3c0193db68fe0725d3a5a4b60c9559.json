{"ast":null,"code":"const typeMap = {\n  success: 'success',\n  info: 'info',\n  warning: 'warning',\n  error: 'error'\n};\nexport default {\n  data() {\n    return {\n      visible: false,\n      message: '',\n      duration: 3000,\n      type: 'info',\n      iconClass: '',\n      customClass: '',\n      onClose: null,\n      showClose: false,\n      closed: false,\n      verticalOffset: 20,\n      timer: null,\n      dangerouslyUseHTMLString: false,\n      center: false\n    };\n  },\n  computed: {\n    typeClass() {\n      return this.type && !this.iconClass ? `el-message__icon el-icon-${typeMap[this.type]}` : '';\n    },\n    positionStyle() {\n      return {\n        'top': `${this.verticalOffset}px`\n      };\n    }\n  },\n  watch: {\n    closed(newVal) {\n      if (newVal) {\n        this.visible = false;\n      }\n    }\n  },\n  methods: {\n    handleAfterLeave() {\n      this.$destroy(true);\n      this.$el.parentNode.removeChild(this.$el);\n    },\n    close() {\n      this.closed = true;\n      if (typeof this.onClose === 'function') {\n        this.onClose(this);\n      }\n    },\n    clearTimer() {\n      clearTimeout(this.timer);\n    },\n    startTimer() {\n      if (this.duration > 0) {\n        this.timer = setTimeout(() => {\n          if (!this.closed) {\n            this.close();\n          }\n        }, this.duration);\n      }\n    },\n    keydown(e) {\n      if (e.keyCode === 27) {\n        // esc关闭消息\n        if (!this.closed) {\n          this.close();\n        }\n      }\n    }\n  },\n  mounted() {\n    this.startTimer();\n    document.addEventListener('keydown', this.keydown);\n  },\n  beforeDestroy() {\n    document.removeEventListener('keydown', this.keydown);\n  }\n};","map":{"version":3,"mappings":"AA2BA;EACAA;EACAC;EACAC;EACAC;AACA;AAEA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACAC;MACA,sCACA,mDACA;IACA;IACAC;MACA;QACA;MACA;IACA;EACA;EAEAC;IACAR;MACA;QACA;MACA;IACA;EACA;EAEAS;IACAC;MACA;MACA;IACA;IAEAC;MACA;MACA;QACA;MACA;IACA;IAEAC;MACAC;IACA;IAEAC;MACA;QACA;UACA;YACA;UACA;QACA;MACA;IACA;IACAC;MACA;QAAA;QACA;UACA;QACA;MACA;IACA;EACA;EACAC;IACA;IACAC;EACA;EACAC;IACAD;EACA;AACA","names":["success","info","warning","error","data","visible","message","duration","type","iconClass","customClass","onClose","showClose","closed","verticalOffset","timer","dangerouslyUseHTMLString","center","computed","typeClass","positionStyle","watch","methods","handleAfterLeave","close","clearTimer","clearTimeout","startTimer","keydown","mounted","document","beforeDestroy"],"sourceRoot":"node_modules/element-ui/packages/message/src","sources":["main.vue"],"sourcesContent":["<template>\n  <transition name=\"el-message-fade\" @after-leave=\"handleAfterLeave\">\n    <div\n      :class=\"[\n        'el-message',\n        type && !iconClass ? `el-message--${ type }` : '',\n        center ? 'is-center' : '',\n        showClose ? 'is-closable' : '',\n        customClass\n      ]\"\n      :style=\"positionStyle\"\n      v-show=\"visible\"\n      @mouseenter=\"clearTimer\"\n      @mouseleave=\"startTimer\"\n      role=\"alert\">\n      <i :class=\"iconClass\" v-if=\"iconClass\"></i>\n      <i :class=\"typeClass\" v-else></i>\n      <slot>\n        <p v-if=\"!dangerouslyUseHTMLString\" class=\"el-message__content\">{{ message }}</p>\n        <p v-else v-html=\"message\" class=\"el-message__content\"></p>\n      </slot>\n      <i v-if=\"showClose\" class=\"el-message__closeBtn el-icon-close\" @click=\"close\"></i>\n    </div>\n  </transition>\n</template>\n\n<script type=\"text/babel\">\n  const typeMap = {\n    success: 'success',\n    info: 'info',\n    warning: 'warning',\n    error: 'error'\n  };\n\n  export default {\n    data() {\n      return {\n        visible: false,\n        message: '',\n        duration: 3000,\n        type: 'info',\n        iconClass: '',\n        customClass: '',\n        onClose: null,\n        showClose: false,\n        closed: false,\n        verticalOffset: 20,\n        timer: null,\n        dangerouslyUseHTMLString: false,\n        center: false\n      };\n    },\n\n    computed: {\n      typeClass() {\n        return this.type && !this.iconClass\n          ? `el-message__icon el-icon-${ typeMap[this.type] }`\n          : '';\n      },\n      positionStyle() {\n        return {\n          'top': `${ this.verticalOffset }px`\n        };\n      }\n    },\n\n    watch: {\n      closed(newVal) {\n        if (newVal) {\n          this.visible = false;\n        }\n      }\n    },\n\n    methods: {\n      handleAfterLeave() {\n        this.$destroy(true);\n        this.$el.parentNode.removeChild(this.$el);\n      },\n\n      close() {\n        this.closed = true;\n        if (typeof this.onClose === 'function') {\n          this.onClose(this);\n        }\n      },\n\n      clearTimer() {\n        clearTimeout(this.timer);\n      },\n\n      startTimer() {\n        if (this.duration > 0) {\n          this.timer = setTimeout(() => {\n            if (!this.closed) {\n              this.close();\n            }\n          }, this.duration);\n        }\n      },\n      keydown(e) {\n        if (e.keyCode === 27) { // esc关闭消息\n          if (!this.closed) {\n            this.close();\n          }\n        }\n      }\n    },\n    mounted() {\n      this.startTimer();\n      document.addEventListener('keydown', this.keydown);\n    },\n    beforeDestroy() {\n      document.removeEventListener('keydown', this.keydown);\n    }\n  };\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}